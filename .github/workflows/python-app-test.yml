# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI with lint, pytest and great expectation

on:
  workflow_dispatch:
  push:
    branches: none
  pull_request:
    branches: [ "main", "test" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yapf flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Automatic Formatting
      run: |
        # run yapf to format the scripts automatically
        yapf -i --style '{use_tabs: False}' ./BasketIntelligence/create_season.py
        yapf -i --style '{use_tabs: False}' ./BasketIntelligence/load_season_data.py
        yapf -i ./setup.py
        yapf -i --style '{use_tabs=False}' ./tests/pyTest/test_create_season.py
        yapf -i --style '{use_tabs=False}' ./tests/data_quality_test/run_great_expectations.py
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82,E111 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install uv
      uses: astral-sh/setup-uv@v1 # Use the official setup-uv action
    - name: Install project dependencies with uv
      run: uv sync # Use uv sync to install dependencies from pyproject.toml
    - name: run pytest
      run: |
        uv add pytest
        uv run pytest tests/pyTest/
    - name: run data quality test (great expectations)
      run: |
        uv add great_expectations
        uv run tests/data_quality_test/run_great_expectations.py
